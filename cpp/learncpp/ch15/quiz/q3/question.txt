3) Whatâ€™s wrong with the following code? Update the programs to be best practices compliant.

3a)

#include <iostream>
#include <memory> // for std::shared_ptr
 
class Resource
{
public:
	Resource() { std::cout << "Resource acquired\n"; }
	~Resource() { std::cout << "Resource destroyed\n"; }
};
 
int main()
{
	Resource *res = new Resource;
	std::shared_ptr<Resource> ptr1(res);
	std::shared_ptr<Resource> ptr2(res);
 
	return 0;
}

answer: ptr1 and ptr2 manage the same resource, but are independent. ptr2 should be created with copy initialization.

3b)

#include <iostream>
#include <memory> // for std::shared_ptr
 
class Something; // assume Something is a class that can throw an exception
 
int main()
{
	doSomething(std:shared_ptr<Something>(new Something), std::shared_ptr<Something>(new Something));
 
	return 0;
}

answer: the compiler has leeway for the order in which doSomething is executed. The classes can be created and throw the exception without the
smart pointer being created. If this happens, then the classes will never be deallocated and there will be a memory leak. Using make_shared() fixes
this potential problem.

#include <iostream>
#include <memory> // for std::shared_ptr
 
class Something; // assume Something is a class that can throw an exception
 
int main()
{
	doSomething(make_shared<Something>(), make_shared<Something());
 
	return 0;
}