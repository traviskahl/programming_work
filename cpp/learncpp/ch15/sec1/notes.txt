with dynamic allocation, pointers can sometimes not be deleted
either from returning before deallocation, throwing an exception, or some other reason
this is because pointers don't have a built in mechanism to "clean themselves up"

enter smart pointers
classes have deconstructors that automatically delete the class when an object goes out of scope
classes can help manage pointers
can have a class that only holds a pointer, lets us have automatic cleanup on leaving scope

EX: Auto_ptr1.cpp

dynamically creates Resource, pass as parameter to templated Auto_ptr1 class
res owns the Resource object, has block scope and goes out of scope when block ends and is destroyed
is a class, therefore Auto_ptr1 deconstructor is called, which deletes m_ptr

as long as Auto_ptr1 is a local variable, its pointer is guaranteed to be destroyed when it goes out of scope
this makes it a smart pointer
Smart Pointer: a composition class that is designed to manage dynamically allocated memory ("dumb" pointers) and ensure that memory gets deleted
when the smart pointer object goes out of scope.

this class has a critical flaw
consider this main method:

int main() {
	Auto_ptr1<Resource> res1(new Resource);
	Auto_ptr1<Resource> res2(res1);

	return 0;
}

this makes the program crash
haven't provided copy or assignment operator, so C++ gives us one that does shallow copies
when res2 is initialized, it points at the same Resource as res1
res1 is deleted leaving a dangling pointer, crashing when it tries to delete something that was deleted

can't be solved by reference
can't be solved by address, defeats the purpose of smart pointers
pass by value makes sense, but leaves us with shallow copies, duplicated pointers, and crashes

enter Move Semantics
instead of copying, we move ownership from one object to another
Move semantics means the class will transfer ownership of the object rather than making a copy.

EX: Auto_ptr2.cpp

overloaded operator= gave ownership of m_ptr to res2
no duplicates of the same pointer, everything's hunky dory

avoid std::auto_ptr
passing it by value to a function makes you dereference a null pointer
doesn't work properly with dynamically allocated arrays and leads to memory leaks
also doesn't really work well with other classes in standard library
completely removed in C++17

C++11 defined "move" and added move sematics properly
added unique_ptr and shared_ptr to replace auto_ptr