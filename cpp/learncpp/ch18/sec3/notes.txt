insertion operator << is used to put information into an output stream
c++ has default operations for all built-in data types
we can create our own with operator overloading as well
both istream and ostream are derived from ios
one job of ios and ios_base are controlling formatting for output

two ways to control formatting: flags and manipulators
flags are like boolean variables that can be turned on and off
manipulators are objects put in a stream that affect the way things are input and output

to switch flag on, use setf() with the flag as the parameter
c++ doesn't put a + in front of positive numbers by default
we can make it so using ios::showpos
//cout.setf(ios::showpos);
//cout << 27 << endl;
Output: +27

can turn on multiple ios flags using |
//cout.setf(ios::showpos | ios::uppercase);
//cout << 27 << endl;

to turn flag off, use unsetf()
//cout.setf(ios::showpos);
//cout << 27 << endl;
//cout.unsetf(ios::showpos);
//cout << 27 << endl;
Output:
+27
27

many flags belong to groups called format groups
format groups are groups of flags that perform similar formatting options
sometimes they're mutually exclusive
format group called basefield contains flags oct, dec, and hex
they control the base of integer values
by default dec is on
if we do this:
//cout.setf(ios::hex);
//cout << 27 << endl;
Output:
27

didn't work as we intended
setf() only turns flags on, it isn't smart enough to turn off ones it needs to
when we turned hex on, dec was still on and took precedence
two solutions
1. turn off ios::dec
//cout.unsetf(ios::dec);
//cout.setf(ios::hex);
//cout << 27 << endl;
Output:
1b

2. use different form of setf() that takes two parameters
first is the flag to set, second is formatting group it belongs to
when using this form, all flags in the group are turned off except the one passed
//cout.setf(ios::hex, ios::basefield);
//cout << 27 << endl;
Output:
1b

using setf() and unsetf() can be clunky so c++ gives us other options through manipulators
they're smart enough to turn on and off appropriate flags
//cout << hex << 27 << endl;
//cout << 28 << endl;
//cout << dec << 29 << endl;
Output:
1b
1c
29

in general manipulators are easier than setting and unsetting flags
many options are accessible using both
some are only available using one so it's important to know both

here's some useful flags, manipulators, and functions
flags are in ios, manipulators are in std, and functions are in ostream class

flag: boolalpha
	if set, booleans print "true" or "false"
	if not set, booleans print 1 or 0

manipulator:
	boolalpha: booleans print "true" or "false"
	noboolalpha: booleans print 1 or 0 (default)


flag: showpos
	if set, prefix positive numbers with a +

manipulator:
	showpos: prefixes positive numbers with +
	noshowpos: doesn't prefix positive numbers


flag: uppercase
	if set, uses uppercase letters

manipulator:
	uppercase: uses upper case letters
	nouppercase: uses lower case letters


group: basefield
	flag: dec
		prints values in decimal (default)
	flag: hex
		prints values in hexadecimal
	flag: oct
		prints values in octal
	flag: (none)
		prints values according to leading characters

manipulator:
	dec: prints values in decimal
	hex: prints values in hexadecimal
	oct: prints values in octal


using manipulators or flags it's possible to change precision and format of floating points numbers
several options that combine in complex ways

group: floatfield
	flag: fixed
		uses decimal notation for floating point numbers
	flag: scientific
		uses scientific notation for floating point numbers
	flag: (none)
		uses fixed for numbers with a few digits, scientific otherwise
	flag: showpoint
		always show a decimal point and trailing 0's for floating point values

manipulators:
	fixed: use decimal notation
	scientific: use scientific notation
	showpoint: show a decimal point and trailing 0's
	noshowpoint: don't show a decimal point and trailing 0's
	setprecision(int): sets the precision of floating point functions (defined in iomanip.h)

functions:
	precision(): returns the current precision
	precision(int): sets the precision and returns the old precision


typically numbers are printed without any regard to the space around them
it's possible to left- or right-justify the printing of numbers
we first have to define a field width
if the actual number is smaller than the field width, it will be left- or right-justified
if it's larger, it's not truncated but rather it overflows the field

group: adjustfield
	flag: internal
		left-justifies the sign and right-justifies the value
	flag: left
		left-justifies the sign and value
	flag: right
		right-justifies the sign and value (default)

manipulators:
	internal: left-justifies the sign and right-justifies the value
	left: left-justifies the sign and value
	right: right-justifies the sign and value
	setfill(char): sets the parameter as the fill character (defined in iomanip.h)
	setw(int): sets the field width for input and output (defined in iomanip.h)

functions:
	fill(): returns the current fill character
	fill(char): sets the fill character and returns the old one
	width(): returns the current field width
	width(int): sets the current field width and returns the old one

in order to use any of these formatters, we first have to set the width
can be done with width(int) or setw() manipulator
//cout << -12345 << endl;
//cout << setw(10) << -12345;
//cout << setw(10) << left << -12345 << endl;
//cout << setw(10) << right << -12345 << endl;
//cout << setw(10) << internal << -12345 << endl;
Output:
-12345
	-12345
-12345
	-12345
-	 12345

setw() and width(int) only affect the next output statement
not persistent like some other flags/manipulators

now set filler and do same example

//cout.fill('*');
//cout << -12345 << endl;
//cout << setw(10) << -12345 << endl;
//cout << setw(10) << left << -12345 << endl;
//cout << setw(10) << right << -12345 << endl;
//cout << setw(10) << internal << -12345 << endl;
Output:
-12345
****-12345
-12345****
****-12345
-****12345

all blank spaces are now the fill character